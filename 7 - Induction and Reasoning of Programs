

## Inductive definition of a list##

- The empty list [] is a list of type 'a list
- If x is an element of type 'a and xs is a list of type 'a list then x::xs is a list of type 'a list
-Nothing else is a list of type 'a list

``` 
type 'a list =
| []
| (::) of 'a * 'a list
```

## How to prove properties about lists? ##







##Example: Does is compute something meaningful

**Program A**

```
let rec rev 1 = match l with
|[] -> []
| x::1 -> (rev 1) @ [x]
```
___HOW ARE WE GOING TO PROVE???___

//Correctness property :
//For all 1 length (rev 1) = length 1 <---- P 
//Base Case <---- needs to be the empty list

For all list l, length (rev 1) = length 1
NOTE: our property P (1) = length(rev1) = length 1

By induction on th list l

BASE CASE: 1 = []
length(rev []) --> length []   //by the program rev
                      
By Induction on the list l

STEP CASE: 1 = x::xs
ASSUME (IH): length(rev xs) = length xs
TO SHOW: length (rev(x::xs)) = length (x::xs)

length(rev(x::xs)) 
---> length((rev xs) @ [x]) by program rev


SOMEHOW: length(l1 @ l2) = length l1 + length l2 . // try to prove this property for practice
  This is a property we would like to use, but we need to prove.
  
  
                      
                      

# But what is equality??

-When we say length(rev 1) = legnth 1, we are not saying that these are the same program!
-We should write
"There exists v and w st length(rev 1) *down arrow* v and length 1 *down arrow* w and v = w"
-The notation e *down arrow* v ====== e evaluates to the value of v
- We will write e = e' but its an abuse of notation
