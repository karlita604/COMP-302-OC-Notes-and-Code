****Warm-up: Computation and Effects****


* Every expression in Ocaml has a type
* Every expression computes to a value or diverges (inf loop)
* Expressions may also have an effect --> update memory, raise exceptions, print to screen...


****Exceptions****

Benefits:
* Separate the "happy path" from exceptional circumstances --> avoid clutter
* Diverting control flow!!!

**** Static Vs. Dynamic Violations ****
* Static violations are signalled by typechecking errors
* Dynamic violations are signalled by raising an exception
    --> unexpected inputs or maybe a division by 0


``` 3/0 ```
will type-check but cannot be evaluated and will incur a
runtime fault that is signalled by raising the exception Division_by_zero

Type= int
Value= 
Effect= raises run-time exception Division by zero

```
let head_of_empty_list =
let head (x::t) = x in 
head []
```
Type= 'a 
Value= 
Effect= raises run-time exception Match_failure

* Another source of dynamic run-time error is due to non-exhaustive
 matches. For example:

```
let head (x::t) = x ;;
Characters 9-19:
  let head (x::t) = x ;;
           ^^^^^^^^^^
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
val head : 'a list -> 'a = <fun>
# head [];;
Exception: Match_failure ("", 650, -489).
#  
```

* It is also possible to define our own exceptions. These last examples have used pre-defined exceptions.
These pre-defined ones have pre-defined meaning.

```
exception Domain

(* Check the invariant for the externally visible function only, and not during recursion. *)

let fact n =
  let rec f n = 
    if n = 0 then 1
    else n * f (n-1)  
  in
  if n < 0 then raise Domain
  else f n

(* Define a wrapper for `fact` that catches the error and nicely prints it. *)
let runFact n =
  try
    let r = fact n in 
    print_string ("Factorial of " ^  string_of_int n ^ " is " ^ string_of_int r ^ "\n")
  with
  | Domain ->
     print_string "Error: Invariant violated -- trying to call factorial on inputs < 0"
```
Notice how we declared our own exception
Technically, an `exception` declaration is _adding a new constructor_ to the preexisting type `exn`.
When we define such new exception, we can also bundle other data, similar to ordinary constructors.
Then, the try-with construct allows us to catch raised exceptions and perform _pattern-matching_ on the `exn` type.

Example

```
type key = int
type 'a btree = 
  | Empty 
  | Node of 'a btree * (key * 'a) * 'a btree

(* Previous solution to checking whether there is an element with key
   k in the tree provided based on option type; 

   findOpt : 'a btree -> int -> 'a opt *)
let rec findOpt t k = match t with 
  | Empty -> None
  | Node(l, (k', _), _) when k < k' -> findOpt l k
  | Node(_, (k', _), r) when k > k' -> findOpt r k
  | Node(_, (_ , x), _) -> Some x

(* Using exceptions to signal error *)
(* New implementation using exception *)

(* Define a program-specific exception with a name *)
exception NoSuchKey of key (* exception includes the problematic key *)

(* Find (T,k) = d if (k,d) is in the tree T
   raises exception NoSuchKey otherwise *)
let rec find t k = match t with 
  | Empty -> raise (NoSuchKey k) (* raise instead of using None *)
  | Node (l, (k', d), r) when k < k' -> find l k
  | Node (_, (k', _), r) when k > k' -> find r k
  | Node (_, (_,  x), _) -> x (* no need to use Some now *)

(* Find t k n = d 
   searches the tree T up to depth n. If we did no find an entry with key k
   we raise the exception Error with error msg "No entry found in tree"; 
   if we exceeded our bound n, we raise the exception Error with the
   error msg "Bound exceeded" .
*)

exception ErrorMsg of string

let rec findEx t k n = 
  match t with
  | _ when n < 0 -> raise (ErrorMsg "Bound exceeded")
  | Empty ->
     raise (ErrorMsg ("No entry with key " ^ 
			                  string_of_int k ^ 
			                    " found in tree"))
  | Node (l, (k', _), _) when k < k' -> findEx l k (n - 1)
  | Node (_, (k', _), r) when k > k' -> findEx r k (n - 1)
  | Node (_, (_,  x), _) -> x

(* Instead of using strings, we can define separate exceptions.
   This makes it possible for the caller to easily determine which
   error occurred by using try-with.
 *)

exception BoundExceeded
(* We already defined NoSuchKey *)

let rec findEx' t k n = 
  match t with
  | _ when n < 0 -> raise BoundExceeded
  | Empty -> raise (NoSuchKey k)
  | Node (l, (k', _), _) when k < k' -> findEx' l k (n - 1)
  | Node (_, (k', _), r) when k > k' -> findEx' r k (n - 1)
  | Node (_, (_,  x), _) -> x
```


**********************Structured Errors**********************
General Idea:
* Define a data type to represent a collection of app-specific errors
* define a single exception that bundles a value of that type

Now it is easier to handle app-specific errors of a certain type (a praticular function could raise)
**************************************************************
This is super cool because its kinda a mix of pattern matching and also defining a new data type

```
type lookup_error =
  | BoundExceeded
  | NoSuchKey of key

exception LookupError of lookup_error 

(* Define a helper for raising lookup errors. *)
let lookup_error e = raise (LookupError e)

let rec findEx'' t k n = 
  match t with
  | _ when n < 0 -> lookup_error BoundExceeded
  | Empty -> lookup_error (NoSuchKey k)
  | Node (l, (k', _), _) when k < k' -> findEx' l k (n - 1)
  | Node (_, (k', _), r) when k > k' -> findEx' r k (n - 1)
  | Node (_, (_,  x), _) -> x
	```
	
	
	(* Structured errors give an excellent way to separate the concerns of the program:
   1. the searching is unobscured by exception handling logic
   2. the handler logic is parameterized via a higher-order function,
      so different handling logic can be plugged in as needed.
   3. by partially applying the handler function, we recover a safe
      lookup function that performs the already specified error-recovery
      logic.
 *)

(* The primary benefit of exceptions:
   Separating the happy path (e.g. tree searching) from error
   handling.
*)

(* This use of exceptions to signal error conditions sugests raising
   exceptions is fatal: an unhandled exception terminates the program
   -- but signalling an error is only one use of exceptions! 
   We can instead use exceptions to construct interesting types of
   control flow.
*)






******* Today's example: Got change ? ********

Implement a function change. It takes an input a list of availaable coins and an amount amt. It returns the exact change for the amount (ie. a list of available coins, [c1;c2; ... ;cn] such that c1 + c2 + ... + cn = amt)
If possible, otherwise raise an exception Change

```
exception Change

let rec listToString l = match l with 
  | [] -> ""
  | [x] -> string_of_int x
  | x :: xs -> string_of_int x ^ ", " ^ listToString xs


let rec change coins amt = match coins with
  | _ when amt = 0 -> [] 		(* If the amount of change to make is zero, then we're done. *)
  | [] -> raise Change 			(* run out of available coins but amt is not 0, then we fail with an exception*)
  | coin :: cs when coin > amt -> change cs amt
     (* if this coin is too large, we forget about it for now and consider the other coins *)
  | coin :: cs ->
	   try  coin :: change coins (amt - coin)
	   with
  | Change ->  change cs amt
        (* If it turns out that by using `coin` we were unable to make
           the remaining change, then we forget about `coin` and try to
           make change for the full amount with the remaining coins.
         *)
		 
let change_top coins amt =
  try 
  let c = change coins amt in
  print_string ("Return the change: " ^ listToString c ^ "\n")
  with Change -> print_string ("Sorry, I cannot give change\n")
```
       









