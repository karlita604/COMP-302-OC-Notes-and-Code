*** Inductive definition od a binary tree ***

    * The empty tree /Empty/ is a binary tree, of type 'a tree
    * If l : 'a tree

It might be difficult to encode rthe invariant that we have -- correspond to the restriction that 
Red-Black trees have

This is not captured in the inductive definition that we are seeing here


*** Binary Search Trees***
A binary search three t: ('a * 'a) tree is a binary tree

  * we want to insert something 
  
  
  
  How are we going to do insertion????
  
  
  let t1 = Node((9, "a"), Node((3, "pepper"), Node ((2, "salt"), Empty, Empty), Node ((5, "dog"), Node((4, "camel"), Empty
  
  
  
  
  (* insert:  'a * 'b -> ('a * 'b) tree -> ('a * 'b) tree
   
   insert (x,d) T = T'  where (x,d) has been inserted into T
   and any previous occurrences of (x,d') in T have been
   overwritten
  
*)

let rec insert (k,v) t = match t with 
  | Empty -> Node (Empty, (k,v), Empty)
  | Node (l, (k',v'), r) ->
    if k = k'   
    then Node ((k',v), l, r)
    else
      (if k<k' 
      then Node((k',v'), insert (k,v) l), r)
      else 
      Node ((k',v'), l, insert (k,v) r)
         
        
        
 let rec lookup k t = match t with
 |Empty -> None
 |Node((k',v'), l, r) -> 
   if k = k' then 
      some (v')
      else 
         (
            if k<k' then
            lookup 
            
            
            
 *****We will use induction***** 
 
 
 STEP 1 : SAY HOW  YOU ARE GOING TO PROVE THIS
 
   INDUCTION ON t
   
   Base: t = Empty
   TO SHOW: lookup x (insert(x,d) Empty) ==> Some(d)
   
   lookup x (insert (x,d) Empty)
   ==> lookup x (Node ((x,d), Empty, Empty))    by program insert
   ==> Sode d                                   by program lookup
   
   
   Step: t = Node ((y,v), l, r)
   IH1: lookup x (Node ((x,d) l) = Some(d)
   IH2: lookup x (Node ((x,d) r) = Some(d)
   
  TO SHOW: lookup x (insert(x,d) (Node ((y,v), l, r)) ==> Some(d)
  
  lookup x (insert(x,d) (Node ((y,v), l, r)) ==> Some(d)
 
 Sub-Case: y=x
 lookup x (insert(x,d) (Node ((y,v), l, r))
 ==> lookup x (Node (x,d), l, r))      by program insert
 ==> Some d                            by program lookup
 
 Sub-Case: x<y
 lookup x (insert(x,d) (Node ((y,v), l, r))
 ==> lookup (Node ((y,v), (insert (x,d) l), r)) by program insert
 ==> lookup x (insert (x,d) l)                  by program lookout
 ==> Some(d)                                    by IH1
 Sub-Case: x>y
 
 
 
 
 
 
 
 
 
 let rec lookup k t = match t with
 | Empty -> None
 | Node (l , (k ’ , x ) , r ) ->
if k = k ’ then
 Some x
else
if k < k ’ then lookup k l else lookup k r
         
         
         
************************************************************************         
         
         
 Should just follow the recipe -- can be generalized 
 
 
 type flavour = Chocolate | Raspberry | coconut
 type 'a cake = 
 |Slice of 'a
 |MoreCake of 'a cake * 'a cake
 
 let rec count c = match c with 
 |Slice f -> 1
 |MoreCake (c1, c2) -> count c1 + count c2
 
 let rec cut c = match c with 
 |Slice f ->  MoreCake( Slice f, Slice f)
 |MoreCake(c1,c2) -> MoreCake (cut c1, cut c2)
 
 
 Prove: count (cut c ) = count c * 2
 
 Prove by Induction on c
 
 BASE: c = Slice f
 TO SHOW: count (cut (Slice f)) = (count (Slice f)) * 2
 
 
 count (cut (slice f))
 ==> count (MoreCake (Slice f, Slice f)       by prog cut
 ==> count (Slice f) + cut (Slice f)          by prog count
 ==>2
 
 count(Slice f) *2
 ==>1*2
 ==>2
 
 Base case holds
 
 STEP: 
 
 
 NOT DONE TOOK PIC
 
 
 
 
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
