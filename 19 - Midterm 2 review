Midterm is Monday -- you may have a cribsheet 


**** Different types ******
let rec f b l = match l with
|[] -> b
|x::xs -> f x

a) 'a -> 'a list -> 'a
b) ('a -> 'b) -> 'a -> 'a list -> 'b 			IT CANNOT BE THIS BECAUSE THIS IS SAYING THAT IT TAKES IN 3 ARGS 
c) ill-typed
d) int -> int list -> int 

what would be the result of f x --> function ! f x -- what is the type = 'a list -> 'a 
this means that it is incompatible because we are expecting a different type.



let rec f x = f (f x) in (f true, f 1)
What is the most general type of this expression?

a) bool*int
b) ill typed
c) stack overflow? loop recursion?

What is the type of f? 'a -> 'a 
Whatever it produces then it takes it back in which means that input type = output.
and so takes in some 'a and then it 
It is a polymorphic function because it makes no claims as to what the type of x is. ---- 'a -> 'a
This is why you can call f true and f 1 --> will return a tuple of bool*int -- STATICALLY 
But when you run it you would get a stack overflow



What is the most general type of the following expression
let f x y = if x > 0 then x = y else y = x

a) int -> int -> unit
b) int -> int-> bool
c) ill type







type checking example 3 :

let f x y = if x > 0 then x = y else y = x

let x = ref (3*2) in 
let r = x in 
let f 
	let r = ref 4 in
	let a = !x *2 in 
		fun u ->
			x:= 1;
			u + !x + a + !r
			
		in
		let x = ref 7 in 
		let a = 10 in
		x :=2;
		f(!r *a)
		
		
		
		
		
		
		
		
		
		
		STACK	
																												+-----+
																									----> || 2 ||
																								 | 		  +-----+
																								 |		 																						 
		+--------------------+--------------------+	 |		 +-------------------------------+
		|					a					|				10						|  |		 || u | x:= 1;	u + !x + a + !r		|
		+--------------------+--------------------+	 |		 +-------------------------------+
		|				x 					 |     				--------|--|		 | a  | 12 . |																					 
		+--------------------+--------------------+					+---------+				+-----+
		|				f						 |     				--------|------> || r | 	--|--->   |  4  |
		+--------------------+--------------------+					+---------+				+-----+
		|				r						 | 						--------|------> 
		+--------------------+--------------------+        +========+
		|				x 					 | 						--------|------> ||	6			| . *** this will be updated to 1 and erasing 6****
		+--------------------+--------------------+        +========+


f (6*10 ) = f (60)
===> 60 + 1 + 12 + 4 = 77

When you bind something to a value it only sees the past it doesnt see the future














type counter =
{freshVar : string -> string;
 reset : unit -> unit }
 
 let counter_obj = 
 		let counter = ref 0 in 
		{freshVar = (fun x -> let _ = counter := !counter+1 in    THIS RETURNS A VALUE UNIT AND AS AN EFFECT IT WILL UPDATE COUNTER
															x ^ string -of_int (!counter))
			reset = (fun () -> counter := 0)}
			
let c = counter_obj


suppose we evaluate c.freshVar "y"
what is returned what effects if any took place? 
		
		
THE EFFECT THAT TOOK PLACE WAS THAT THEMEMORY CELL CALLED COUNTER WAS UPDATED? THE NEW VALUE IS NOW 1 , WHEN IT WAS PREVIOUSLY 0. WHAT WILL IT RETURN? --> y1















We should do some examples with continuations
















***********************************************************************************************************************
(* PROBLEM 1: CONTINUATIONS *)

(* Finding all paths in a tree. *)

(* Binary trees *)
type 'a tree =
  | Empty
  | Node of 'a tree * 'a * 'a tree

(* A direction we can follow at a node. *)
type dir = L | R

(* A path in a binary tree is just a list of directions. *)
type path = dir list

(* We say that a path is _complete_ if following it leads to an Empty. *)

let leaf x = Node (Empty, x, Empty)
let ex =
  Node
    ( Node
        ( leaf 1,
          2,
          leaf 3
        )
    , 4
    , Node
        ( leaf 5,
          6,
          leaf 7
        )
    )

(* e.g. [L; L; L] is a complete path in `ex` because we can go
   left from the root (4) to get to the subtree starting with 2,
   then go left to get to the subtree starting with `1`, then go left
   to get to an Empty node.
 *)
 let empty_path = []

(** Find *all* complete paths in the tree using naive recursion. *)
(*this is important because it is a list of paths , paths are lists and so it is a list of lists*)
(** Find *all* complete paths in the tree using naive recursion. *)
let rec all_paths t : path list = match t with 
|Empty -> [empty_path]
|Node(l,_,r) -> 
let ps_l = List.map (fun r -> L::r)(all_paths l) in
let ps_r = List.map (fun r -> R::r))all_paths r) in
ps_l @ ps_r

(** Find all paths in the tree using tail recursion with continuations. *)
let rec all_paths_tr t k =
  assert false

(* PROBLEM 2: REFERENCES *)

(* Monitoring a function to see how many times it is called. *)

(** Return a function that simulates f but increments an internal counter,
    which can be read by using the second returned function of type unit -> int.
 *)
let monitor (f : 'a -> 'b) : ('a -> 'b) * (unit -> int) =
  assert false

(* PROBLEM 3: SAT SOLVING *)

(* The Satisfiability Problem (SAT) is the problem of deciding whether
   a (propositional) logical formula is _satisfiable_, i.e. does there
   exist an assignment of truth values for the variables in the formula
   that makes it true?

   We represent logical formulas with the following type:
 *)

(** Logical formulas. *)
type exp =
  | Disj of exp * exp
  | Neg of exp
  | Var of int

(* Notice that we only define disjunctions (logical OR) and negations
   (logical NOT) as logical connectives.
   This is fine, because all other connectives one might care about
   (e.g. conjunction and implication) can be defined in terms of
   these.

   We now define some shorthands / syntactic sugar for the connectives.
 *)

(** Shorthand for variables. *)
let v k = Var k

(* OR operator *)
let ( +++ ) e1 e2 = Disj (e1, e2)

(* AND operator *)
let ( *** ) e1 e2 = Neg (Neg e1 +++ Neg e2)

(* IMPLIES operator *)
let ( ^=> ) e1 e2 = Neg e1 +++ e2                      

(* Here are some example formulas. *)

let ex1 =
  v 0 *** v 1  ^=> v 0
(* (a & b) => a *)

let ex2 =
  v 0 *** Neg (v 0)
(* a & ~a *)

let ex3 =
  v 0 +++ v 1 *** Neg (v 1)
(* a | (b & ~b) *)

(* Notice that we represent variables as _numbers_.
   They are represented by their index into a list that we call the
   _environment_ (usually called `env` in the code)

   When we _evaluate_ a formula in an environment, we recursively
   evaluate the subparts and recombine.
   e.g. eval env (v 0 &&& v 1)
   should evaluate v 0 and v 1 and then take the _boolean_ AND (&&).
   To evaluate `v 0`, we need to look up the 0th element of `env`.
   env : bool list, so the lookup produces a bool, and we're done.

   We need to implement this lookup operation.
 *)

(** Lookup a variable assignment in the environment env.
    Returns None if the index is out of bounds, i.e. that variable
    does not have an assignment.
 *)
let rec lookup env k = match env, k with
  | x :: _, 0 -> Some x
  | _ :: xs, k -> lookup xs (k-1)
  | _ -> None

(** Lookup a variable, but throw an exception if it is not assigned. *)
let lookup' env k =
  match lookup env k with
  | Some x -> x
  | _ -> failwith "variable out of bounds"

(* Finally, we can implement a *complete* evaluator,
   which needs an environment `env` containing a value for *every*
   variable.
   I call such an `env` a *complete* environment.
 *)

(** Evaluates a logical formula with a complete assignment of variables. *)
let rec eval env = function
  | Disj (e1, e2) -> eval env e1 || eval env e2
  | Neg e1 -> not (eval env e1)
  | Var k -> lookup' env k
(* we use lookup' here because the given `env` is supposed to be complete. *)

(* The idea for our SAT solver is to work not with complete
   environments, but with *partial* environments.
   A partial environment only assigns values to the first `n`
   variables.
   We can partially evaluate a formula when we have a partial
   environment by allowing our evaluator to answer in three ways:
   - The formula is _definitely_ true
   - The formula is _definitely_ false
   - We don't know if it's true or false
   The third option occurs when trying to evaluate a variable that
   does not have a value.
   We can represent these three possibilities with the type:
   bool option
   It gets propagated upwards in certain cases.
   For example, given the environment [true] (that is, v 0 = true),
   let's evaluate (v 1 +++ v 0)
   v 1 is unknown so we get None in the first recursive call.
   Now this isn't enough to conclude that the whole OR is unknown,
   because perhaps the right subexpression (v 0) is definitely true.
   So we must evaluate the right subexpression, v 0.
   We find that (v 0) is definitely true, so the whole OR must be
   definitely true, *even though* we didn't know anything about v 1.
 *)

(** Idea: partially evaluate an expression.
    Return None if the evaluation _crucially_ depends on unassigned
    variables. This means "don't know".
 *)
let rec eval_maybe (env : bool list) (phi : exp) : bool option =
  assert false

exception Unsatsifiable

(* Now we're ready to build the solver.
   `sat env phi k` is given a formula `phi` with `k` unassigned
   variables in it.
   It checks if the partial environment `env` is satisfying by using
   `eval_maybe`.
   If it is definitely true, `env` is satisfying so we're done.
   If it is definitely false, `env` must have a bad choice, so we need
   to backtrack.
   If it is unknown, we can make one more assignment, and keep going.
   By making an assignment, we reduce the number of unassigned
   variables by one, so k ought to be decremented in the recursive
   call.
 *)

(** Build up a satisfying assignment of variables progressively. *)
let rec sat env phi k = assert false


		
		
		
		
		
		
		
		
		























