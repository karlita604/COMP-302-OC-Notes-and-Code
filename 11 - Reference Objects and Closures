Computations and Effects



Expressions in OCaml have characteristics:
+ An expression has a type -- a little lie
+ An expression evaluates to a value (or diverges)
		+ It diverges but still has a type
		+ Every program that is trying to be executed -  has a type 
+ An expression may have a type and it may also have an effect ***


```
let (k : int) = 4;;
let (k : int) = 3 in k * K ;; (* let me introduce this value of k within this scope *)
k;;
(* What is the value of k? =4 *)
```

We only overshadow the previous occurence of k in out binding stack within the scope of the k*k 
We only see the past but we never see the future



let test () = 
  let pi   = 3.14 in                              (* 1 *)
  let area = (fun r -> pi *. r *. r) in           (* 2 *)
  let a2   = area (2.0) in                        (* 3 *)
  let pi   = 6.0  in                              (* 4 *)
  let a3 = area 2.0 in
  print_string ("Area a2 = " ^ string_of_float a2 ^ "\n"); (*What will it print?*) = 12.56
  print_string ("Area a3 = " ^ string_of_float a3 ^ "\n")  (*What will it print?*) = 12.56
;;



******How do we program with state?*****
+ How do we allocate?
		``` let x = ref 0 ``` Allocate a reference with the name x in memory and initialized it with 0
		+ We are creating a space in memory and we are storing the number 0 
		+ the type of this expression is int ref
			YOU CANNOT DO ADDDRESS ARITHMETIC r + 2 --> runtime error
			
			
		 ```!r``` --> - : int = 0
		
		 ```r := 2``` --> - : unit = () UPDATE R
		 
		 ```!r``` --> - : int = 2  READ R
+ How do we read value stored in a reference call?

```!x```  -- Read value that is stroed in the reference cell with name r
``` let { contents = x } = r ``` -- Pattern match on value tht is stored in the reference cell r

+ How do we update the value stored in a reference cell
``` x:=3 OR x.content <- 3``` Writes the value in the refernce cell with the name r. The previously stored value is overwritten

+ How do we compare two reference calls?
		We might want to compare the content or we want to compare addresses
		
		+ "==" means compare two addresses
		+ "=" means compare values
		
		
	
		
		
		
		DEMO 
		
		When we say:
		
		let r = ref 0
		!r : int (*provided that r has int ref*)
		r := <exp> (provided that r has a type)
		r := 2;;
		r := !r + 1;;
		
		Cannot do pointer arithmetic (not usually recommended anyway)
		
		Let's play a little but
		
		r.content <- 3
		let s = ref 3;;
		s = r;; --> boolean true
		s==r;; -->boolean false -- because they both have different addresses
		
		
*********************************
		
		
let run_up () = 
  let pi   = 3.14 in                              (* 1 *)
  let area (r : float) = !pi *. r *. r) in           (* 2 *)
  let a2   = area (2.0) in                        (* 3 *)
  (let pi   = 6.0  in                              (* 4 *)
  
  print_string ("Area a2 = " ^ string_of_float a2 ^ "\n"); (*What will it print?*) = 12.56
  print_string ("Area a3 = " ^ string_of_float a3 ^ "\n"))  (*What will it print?*) = 12.56
;;

********************************

Imperative Programming in OCaml

```
let imperative_fact n = 
let result = ref 1 in 
for i = 1 to n do 
	result := !result * i
done;
!result
```
• More complicated than the purely functional version
• Considered bad style in a functional language
• Harder to reason about its correctness (can’t use induction!)

When we talked about reasoning of our programs it always
falls out of our inputs and outputs, when uyou use for loops , 
memory location becomes really hairy


GOOD USES OF STATE: GLOBAL COUNTER

```
let counter = ref 0

(* newVar () === > a, where a is a new name *)
(* Names are described by strings and an nat. *)

let counter = ref 0
let newVar()=
(counter := !counter +1;
"a" ^ string_of_int (!counter));;  
I AM UNSURE WHAT THE ^ MEANS HELP SOS -- i think it means concatinate
```


print_string "302";;
	302
	- : unit = ()
	
+ You can chain things together
(print_string "302"; print_string "mCgill")
	302mCgill
	- : unit = ()
	
	
(r := 42; 
print_string("I've updated r to " ^ (string_of_int (!r)))
I've updated r to 42
	- : unit = ()
	
	
	WHAT IF YOU HAD MULTIPLE FUNCTIONS THAT ACCESS THE SAME COUNTER	??
	
	
let counter = ref 0

(* newName () ===> a,  where a is a new name *)
(* A names is a string denoting natural numbers.*)
let newName () =
  counter := !counter + 1;
  "a" ^ string_of_int (!counter)

(* However, this counter is global, and any other function could
   modify it! *)
   
  (* Mimicking object-oriented programming, with _private_ state *)
```
let (tick, reset) =
  let counter = ref 0 in 
  let tick () =
    incr counter;
    !counter
  in
  let reset () =
    counter := 0
  in 
  (tick , reset)
```
(* This declaration introduces two functions tick:unit -> int
  and reset:unit -> unit. Their definitions share a private
    variable `counter` that is bound to a reference cell
    containing the current value of a shared counter. The tick
    operation increments the counter and returns its new value, and
    the reset operation resets its value to zero. The types
    already suggest that (implicit) state is involved. 
*)

let c = counter_obj
```c.tick```
	






