let double_tests = [
  (0, 0);
  (1, 2);
  (3, 6); 
  (6,12);
  (10,20);
  
]

(* TODO: Correct this implementation so that it compiles and returns
the correct answers.
*)

let double n = 2 * n 
               


(* TODO: Write your own tests for the fact function.
         See the provided tests for double, above, for how to write test cases.
         Remember that you should NOT test cases for n < 0.
*)
let fact_tests = [
  (* Your test cases go here.
Remember that the outputs of fact should be *floating-point* numbers.
  *)
  (0,1.);
  (1,1.);
  (3,6.);
  (7,5040.);
]

(* TODO: Correct this implementation so that it compiles and returns
         the correct answers.
*)
let rec fact n =
  if n = 0 then 1.
  else if n = 1 then 1.
  else
    float n *. fact (n-1)

(* TODO: Write a good set of tests for max_factor. *)
let max_factor_tests = [
  
  (2,1);
  (3,1);
  (7,1);
  (9,3);
  (22,11);
]

(* TODO: Implement max_factor. *)
let max_factor n =
  let rec loop i = 
    if i <= 2 then
      1 
    else if n mod i = 0 then
      i 
    else loop (i-1) in
  loop (n / 2) 

(* TODO: Write a good set of tests for fib_tl. *)





let fib_tl_tests = [
  (0,1);
  (1,1);
  (3,3);
  
  
]

(* TODO: Implement a tail-recursive helper fib_aux. *)
let rec fib_aux n a b =
  match n with
  | 0 -> 1
  | 1 -> a 
  | n -> fib_aux (n-1) (a+b) a
           

(* TODO: Implement fib_tl using fib_aux. *)
let fib_tl n =
  fib_aux n 1 1
    
